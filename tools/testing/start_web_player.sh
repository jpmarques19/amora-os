#!/bin/bash
# Amora Testing Framework - Web Player UI Server Launcher
# This script starts a local web server for the Amora web player UI

# Default configuration
WEB_PORT=8080
WEB_DIR="$(pwd)/web-player"
MQTT_HOST="localhost"
MQTT_PORT=1883
DEVICE_ID="amora-test-device"
LOG_DIR="$(pwd)/tools/testing/logs"
VERBOSE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--port)
      WEB_PORT="$2"
      shift 2
      ;;
    -d|--web-dir)
      WEB_DIR="$2"
      shift 2
      ;;
    -b|--broker-host)
      MQTT_HOST="$2"
      shift 2
      ;;
    -q|--broker-port)
      MQTT_PORT="$2"
      shift 2
      ;;
    -i|--device-id)
      DEVICE_ID="$2"
      shift 2
      ;;
    -l|--log-dir)
      LOG_DIR="$2"
      shift 2
      ;;
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    -h|--help)
      echo "Usage: $0 [options]"
      echo "Options:"
      echo "  -p, --port PORT         Web server port (default: 8080)"
      echo "  -d, --web-dir DIR       Web player directory (default: ./web-player)"
      echo "  -b, --broker-host HOST  MQTT broker hostname (default: localhost)"
      echo "  -q, --broker-port PORT  MQTT broker port (default: 1883)"
      echo "  -i, --device-id ID      Device ID (default: amora-test-device)"
      echo "  -l, --log-dir DIR       Log directory (default: ./tools/testing/logs)"
      echo "  -v, --verbose           Enable verbose output"
      echo "  -h, --help              Show this help message"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Create necessary directories
mkdir -p "$LOG_DIR"

# Check if the web player directory exists
if [ ! -d "$WEB_DIR" ]; then
  echo "Error: Web player directory not found: $WEB_DIR"
  exit 1
fi

# Check if Python is installed
if ! command -v python3 &> /dev/null; then
  echo "Error: Python 3 is not installed."
  exit 1
fi

# Function to handle script termination
cleanup() {
  echo "Stopping web player server..."
  if [ -f "$WEB_PID_FILE" ]; then
    WEB_PID=$(cat "$WEB_PID_FILE")
    kill "$WEB_PID" 2>/dev/null
    rm -f "$WEB_PID_FILE"
  fi
  echo "Web player server stopped."
  exit 0
}

# Set up trap for clean shutdown
trap cleanup SIGINT SIGTERM

# Set up logging
LOG_FILE="$LOG_DIR/web_player.log"
WEB_PID_FILE="$LOG_DIR/web_player.pid"

# Create a temporary configuration file for the web player
WEB_CONFIG_FILE="$LOG_DIR/web_player_config.js"
cat > "$WEB_CONFIG_FILE" << EOF
// Amora Web Player Configuration
// This file is automatically generated by the testing framework
window.AMORA_CONFIG = {
  brokerHost: "$MQTT_HOST",
  brokerPort: $MQTT_PORT,
  deviceId: "$DEVICE_ID",
  autoConnect: false
};
EOF

# Copy the configuration file to the web player directory
cp "$WEB_CONFIG_FILE" "$WEB_DIR/js/config.js"

# Start the web server
echo "Starting web player server on port $WEB_PORT..."
echo "Web directory: $WEB_DIR"
echo "MQTT Broker: $MQTT_HOST:$MQTT_PORT"
echo "Device ID: $DEVICE_ID"

# Change to the web player directory
cd "$WEB_DIR"

# Start the web server
if [ "$VERBOSE" = true ]; then
  python3 -m http.server "$WEB_PORT" 2>&1 | tee "$LOG_FILE" &
  WEB_PID=$!
else
  python3 -m http.server "$WEB_PORT" > "$LOG_FILE" 2>&1 &
  WEB_PID=$!
fi

cd - > /dev/null

echo $WEB_PID > "$WEB_PID_FILE"
echo "Web player server started with PID: $WEB_PID"
echo "Logs are being written to: $LOG_FILE"
echo "Web player UI is available at: http://localhost:$WEB_PORT"
echo "Press Ctrl+C to stop the server"

# Wait for the web server process
wait $WEB_PID
